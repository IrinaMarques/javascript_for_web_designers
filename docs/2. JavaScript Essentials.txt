--------------
2.1 Variables
--------------
1. Variables
To declare a variable start with var.

Then identifiers have specifc rules they can contain letters, digits, underscores and dollar signs, they must begin with the letter.

Names are case sensitive - bob it's not the same as Bob
Reserved keywords from JavaScript are prohibited from being used as identifiers

var item,
    item2;

2. Values
Can specify a value

item = 5;
item2 = "Hello!";

Variables have something called a scope. Referes to the context in which these variables are available. 
In the previous case - item item2 - they have a global scope, they are available globally.

Later we'll see that it's possible to create a local scope inside, for example, a function or a specific block of code. in that case the variable which has local scope is only available within that function or that block of code.


---------------
2.2 Data Types
---------------

There are 7 data types in total:
- 5 primary 
- 2 composit

Primary:
- string - group of characters
- number
- boolean - can only hold two values - True or False
- null - single value that is null, it's used to erase the contents of a variable without deleting the variable itself
- undefined - when we trying to access an object property that doesn't exist or trying to access a variable that has not been given a value

The typeof operator - nice way of checking the type of variable
In the console on the beowser we write ex. 
typeof false - and will give "boolean"
typeof carModel - "undefined"
typeof name - "string"
typeof "false" - "string"
typeof age - "object" 

-----------
2.3 Arrays
-----------

Array it's a first "composite" data type in JavaScript.

Array it's a list of values.

In the console we write:
list
list2
list3

The lists goes from 0 to 4.
In the console we write:
list[0] --> "John"
list[2] --> "Sander"
list[5] --> undefined
list[4] --> false

Arrays have: 
- Properties
- Methods.

Properties - length property give you the number of items of that array
In the console we write:
list.length --> 5
list2.length --> 0
list3.length --> 2

Methods:
- push - add an item to the end of an array
- pop - remove one item from the end of the array
- shift - remove an item from the front or the start of an array
- unshift - add to the front of an array
- indexOf - to find the index of a specific item in an array

Ex. - push
In the console we write:
list.push("Hi!") --> 6
list --> Array["John", "Marie", "Sander", 32, false, "Hi!"]

Ex. - pop
In the console we write:
list.pop() --> "Hi!"
list --> Array["John", "Marie", "Sander", 32, false]

Ex. - shift
In the console we write:
list.shift() --> "John"
list --> Array["Marie", "Sander", 32, false]

Ex. - unshift
In the console we write:
list.unshift(10) --> "5"
list --> Array[10, "John", "Marie", "Sander", 32, false]

Ex. - indexOf
In the console we write:
list.indexOf(32) --> "3"

-----------
2.4 Objects
-----------

Objects is the second "composite" data type in JavaScript.

Starts with the understanding of "properties" - association between a name and a value. Ex. color = red

Can also have functions as values in which case those properties - called methods.

Objects are collection of properties.

We set the variables as the properties and then we go to the console and type:
person --> Object {name: "Kirk", age: 43, height: 1.76, married: true}

We can use objects inside objects in a way that an object is the value for a property.

In the console:
person --> 
Object {name: "Kirk", age: 43, height: 1.76, married: true, car: Object}

person.car
 --> Object {make: "Honda"}

person.car.make --> 
"Honda"

--------------
2.5 Operators
--------------

There are a few different types.

1. Assignment operator:
Assign a value to its left operand based on the value of its right operand. 

Equal assignment - equal operator =
ex. x = y;

Addition assignment - addition operator
ex. x = x + y;
or  x += y;

Subtraction assignment
ex. x -=y;
or  x = x - y;

Multiplication assignment
ex. x *= y;
or  x = x * y;

Division assignment
ex. x /= y;
or  x = x / y;

Other assignments

2. Comparison and logical operators:
Compare its operands and return a value based on the result of that comparison.
If the comparison is true --> true
If the comparison is false --> false

2.1 Comparison operators:
- Equals to --> x == y (just compare the value)
- Not equal --> x != y
- Strict equal --> x === y (considers the operand type)
- Greater than --> x > y 
- Smaller than --> x < y

2.2 Logical operators:
- and --> x && y
- or --> x || y
- not --> !x (not x)

3. Arithmetic operators:

Increment operator: 
Unary operator - only needs one operand.
Add one to its operand.
x=3
3
x++ (first print x and them increment by one)
3
x 
4
++x (first increment it then print it) 
5

Decrement operator:
x--
5
x
4
--x
3

Unary negation: return the nagation of its operand
x = 3 
-x
-3
Unary plus: convert its operand to a number if not already 
X = 3
+3
3
+"3"
3
+true
1
+false
0

4. Concatenation operator or the plus:
That can be apllied to a string
Ex. 
x="Hello"
y="world!"
x+y
"Hello world!"
x+="hello!"
"Hello hello!"
"32" + "3232"
"323232"

-----------------------
2.6 If/Else Statements
-----------------------

Allows to execute various blocks of code if a specific condition is met.

if(condition)

if(this consition is not met) {} else {then we do this}

Ternary Operator or conditional operator:
It's a special case because it's only a JavaScript operator that takes three operates

-----------
2.7 Loops
-----------

A loop is a piece of code that executes repeatedly either a set number of times or until a certain condition is met.

Three main types of loops:
- for 
- do-while
- while


1. For loop:
Will repeat until a specified condition evaluates to false.

for (initialize a variable or a counter ; follows the condition ; the incremental expression) { main statement }

The condition is the thing that's gonna to be evaluated.
Incremental expression is used to increment the counter 


2. Do-while Loop:
Will repeat until a specific condition evaluates to false

do {statement} while (condition)


3. While Loop:
Will execute the statement only if the condition is met. 

--------------
2.8 Functions
--------------

Sub programs that can have their own name
Can be called any time
Can recive parameters
Can return values

To work with functions you must first declare the function

call function 
give a name
(specify a list of parameters)
{ code that will be execute by the function }

--------------
2.9 Selectors
--------------

Give acess to the DOM and allow to manipulate it. 

Some of the more popular or well known selectors to use as a web designer.

console.log(document.body); 
- give us the body properties

console.log(document.images);
- give us the image properties like the URL, the alt, the class name, width and height, the src...

Start using selectors and manipulate them, start doing things with them. 

1. Get elements by the ID:
var firstItem = document.getElementById('item-1')
console.log(firstItem)
- will return the first element 
- Returns a single element because it's not possible to use the same id in another element

2. Get elements by the same class:
var myList = document.getElementsByClass('mylist')
console.log(myList)

3. Get elements by tag name:
var paragraphs = document.getElementsByTagName('p');
console.log(paragraphs);

4. querySelectorAll select all:
var images = document.querySelectorAll('img');
console.log(images);

How to manipulate all the reference objects or elements in my page?
- Use the Css properti using the style property

firstItem.style.color = "red";

------------
2.10 Events
------------

Events happens on the HTML side.
In JavaScript we listen the events and react accordingly.

An event can be:
- triggered by the browser (when the page finish loading, image finish downloading)
- triggered by the user (click a button)

Listen to the events:
- HTML inline
- JavaScript with addEventListener

HTML inline:
<button id='submit' onclick="console.log('Button clicked!')">Click me</button>

JavaScript with addEventListener:
.addEventListener
.removeEventListener